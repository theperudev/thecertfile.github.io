thekey.doitnow('Y29uc3Qgc3RhcnRfdHh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnN0YXJ0X3F1aXoiKTsKY29uc3Qgc3RhcnRfYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnN0YXJ0X29rIik7Cgpjb25zdCBxdWl6X2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5xdWl6LWJveCIpOwpjb25zdCBxdWVfdGV4dCA9IHF1aXpfYm94LnF1ZXJ5U2VsZWN0b3IoIi5xdWVfdGV4dCIpOwpjb25zdCBvcHRpb25zX2JveCA9IHF1aXpfYm94LnF1ZXJ5U2VsZWN0b3IoIi5vcHRpb25zIik7CmNvbnN0IG5leHRfYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLm5leHQtYnRuIik7CmNvbnN0IHRvdGFsX3EgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIucXVpei1mb290ZXIgLnRvdGFsX3F1ZSIpOwpjb25zdCBjb3VudF9xdWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIucXVpei1mb290ZXIgLmNvdW50X3F1ZSIpOwpjb25zdCByZXN1bHRfYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnJlc3VsdC1ib3giKTsKCmNvbnN0IHRvdGFsX3F1ZV9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnRvdGFsLXF1ZSBzcGFuIik7CmNvbnN0IHJpZ2h0X2Fuc19yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnJpZ2h0LWFucyBzcGFuIik7CmNvbnN0IHdyb25nX2Fuc19yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLndyb25nLWFucyBzcGFuIik7CmNvbnN0IHBlcmNlbnRhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIucGVyY2VudGFnZSBzcGFuIik7Cgpjb25zdCBhZ2Fpbl9xdWl6ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnJlc3VsdC1mb290ZXIgLmFnYWluLXF1aXoiKTsKY29uc3QgZXhpdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5yZXN1bHQtZm9vdGVyIC5leGl0Iik7Cgpjb25zdCBtYXJrX3dyb25nID0gJzxpIGNsYXNzPSJmYSBmYS10aW1lcyI+PC9pPic7CmNvbnN0IG1hcmtfY2hlY2sgPSAnJzsKCgpjb25zdCBjbmFtZT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY25hbWUnKS5pbm5lclRleHQ7Cgpjb25zdCBkID0gbmV3IERhdGUoKTsKbGV0IHllYXJzID0gZC5nZXRGdWxsWWVhcigpOwoKdmFyIGRkID0gbmV3IERhdGUoKTsKdmFyIG1vbnRoc3MgPSBkZC5nZXRNb250aCgpKzE7Cgp2YXIgdGhldGl0bGU9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F0aXRsZScpLmlubmVyVGV4dDsKdmFyIGxpbmtlZGluMT0naHR0cHM6Ly93d3cubGlua2VkaW4uY29tL3Byb2ZpbGUvYWRkP3N0YXJ0VGFzaz1DRVJUSUZJQ0FUSU9OX05BTUUmbmFtZT0nK2VuY29kZVVSSUNvbXBvbmVudCh0aGV0aXRsZSkrJyZvcmdhbml6YXRpb25JZD04NzE1NzU2MSZpc3N1ZVllYXInOwpsaW5rZWRpbjErPSc9Jyt5ZWFycysnJmlzc3VlTW9udGg9Jyttb250aHNzKycmY2VydFVybD0nOwoKdmFyIGxpbmtlZGluMj0nJmNlcnRJZD0nOwoKCmNvbnN0IGNvbmZpZyA9IHsKICBhcGlLZXk6ICJBSXphU3lBX1FINURRQnRnZjR3aUdOUzFwUGRucWpsSGg5Y2s0MTgiLAogIGF1dGhEb21haW46ICJsaW5rZWRpbnF1aXotODI2ZDEuZmlyZWJhc2VhcHAuY29tIiwKICBwcm9qZWN0SWQ6ICJsaW5rZWRpbnF1aXotODI2ZDEiLAogIHN0b3JhZ2VCdWNrZXQ6ICJsaW5rZWRpbnF1aXotODI2ZDEuYXBwc3BvdC5jb20iLAogIG1lc3NhZ2luZ1NlbmRlcklkOiAiODAxMDIyMzcyNDk3IiwKICBhcHBJZDogIjE6ODAxMDIyMzcyNDk3OndlYjo4NjRkOTk5ZjQ3OGU1MDUxNmMyZDMwIiwKICBtZWFzdXJlbWVudElkOiAiRy03RDdTR0RXNkVKIgp9OwoKZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcChjb25maWcpOwpjb25zdCBhdXRoID0gZmlyZWJhc2UuYXV0aCgpOwoKZnVuY3Rpb24gbWFrZWlkKGxlbmd0aCkgewogICAgdmFyIHJlc3VsdCAgICAgICAgICAgPSAnJzsKICAgIHZhciBjaGFyYWN0ZXJzICAgICAgID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMDEyMzQ1Njc4OSc7CiAgICB2YXIgY2hhcmFjdGVyc0xlbmd0aCA9IGNoYXJhY3RlcnMubGVuZ3RoOwogICAgZm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKysgKSB7CiAgICAgIHJlc3VsdCArPSBjaGFyYWN0ZXJzLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAKIGNoYXJhY3RlcnNMZW5ndGgpKTsKIAogICB9CiAgcmV0dXJuIHJlc3VsdAp9CgpmdW5jdGlvbiBtYWtlaWRkKGxlbmd0aCkgewogICAgdmFyIHJlc3VsdCAgICAgICAgICAgPSAnJzsKICAgIHZhciBjaGFyYWN0ZXJzICAgICAgID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMDEyMzQ1Njc4OSc7CiAgICB2YXIgY2hhcmFjdGVyc0xlbmd0aCA9IGNoYXJhY3RlcnMubGVuZ3RoOwogICAgZm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKysgKSB7CiAgICAgICByZXN1bHQgKz0gY2hhcmFjdGVycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogCiBjaGFyYWN0ZXJzTGVuZ3RoKSk7CiAKICAgfQogICByZXR1cm4gcmVzdWx0Cn0KCgpmdW5jdGlvbiBnZXRpZCgpCnsKICAgIGNvbnN0IG15aWQ9bWFrZWlkKDYpKyItIittYWtlaWRkKDUpKyItIitjbmFtZSsiLU5EIjsKICAgcmV0dXJuIG15aWQKfQoKCnN0YXJ0X2J0bi5vbmNsaWNrID0oKT0+ewoKICAgIHZhciB1c2VyPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1c2VybmFtZScpLnZhbHVlOwogICAgaWYgKHVzZXIubGVuZ3RoPjMpCiAgICB7CiAgICAgICAgCiAgICAgICAgcXVpel9ib3guY2xhc3NMaXN0LnJlbW92ZSgiaW5hY3RpdmUiKTsKICAgIHN0YXJ0X2J0bi5jbGFzc0xpc3QuYWRkKCJpbmFjdGl2ZSIpOwogICAgc3RhcnRfdHh0LmNsYXNzTGlzdC5hZGQoImluYWN0aXZlIik7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICBhbGVydCgnUGxlYXNlIEVudGVyIE5hbWUnKTsKICAgIH0KICAgIAp9Cgp0b3RhbF9xLmlubmVyVGV4dCA9IGFza2luZy5sZW5ndGg7CnRvdGFsX3F1ZV9yLmlubmVyVGV4dCA9IGFza2luZy5sZW5ndGg7Cgp2YXIgcXVlX2luZGV4ID0gMDsKdmFyIHJpZ2h0X2Fuc3dlcnMgPSAwOwp2YXIgd3JvbmdfYW5zd2VycyA9IDA7CmNvdW50X3F1ZS5pbm5lclRleHQgPSBxdWVfaW5kZXgrMTsKU2hvd1F1ZXN0aW9uKHF1ZV9pbmRleCk7CgpmdW5jdGlvbiBTaG93UXVlc3Rpb24ocV9pbmRleCl7CiAgICBxdWVfdGV4dC5pbm5lclRleHQgPSBhc2tpbmdbcV9pbmRleF0ubnVtKyIuICIrIGFza2luZ1txX2luZGV4XS5vazsKdmFyIG9wdGlvbl9zdGF0ZW1lbnQgPSAiIjsKZm9yKHZhciBpPTA7IGk8YXNraW5nW3FfaW5kZXhdLmNoLmxlbmd0aDsgaSsrKXsKICAgIG9wdGlvbl9zdGF0ZW1lbnQgKz0gYDxkaXYgY2xhc3M9Im9wdGlvbiI+JHthc2tpbmdbcV9pbmRleF0uY2hbaV19PC9kaXY+YDsKfQoKb3B0aW9uc19ib3guaW5uZXJIVE1MID0gb3B0aW9uX3N0YXRlbWVudDsKCnZhciBBbGxPcHRpb25zID0gb3B0aW9uc19ib3gucXVlcnlTZWxlY3RvckFsbCgiLm9wdGlvbiIpOwoKICAgIGZvcih2YXIgaj0wOyBqPEFsbE9wdGlvbnMubGVuZ3RoOyBqKyspewogICAgICAgIEFsbE9wdGlvbnNbal0uc2V0QXR0cmlidXRlKCJvbmNsaWNrIiwiVXNlckFuc3dlcih0aGlzKSIpOwogICAgfQogICAgbmV4dF9idG4uY2xhc3NMaXN0LmFkZCgiaW5hY3RpdmUiKTsKfQoKCm5leHRfYnRuLm9uY2xpY2s9KCk9PnsKICAgIHF1ZV9pbmRleCsrOwogICAgCiAgICBpZihhc2tpbmcubGVuZ3RoPnF1ZV9pbmRleCl7CiAgICAgICAgY291bnRfcXVlLmlubmVyVGV4dCA9IHF1ZV9pbmRleCsxOwogICAgICAgIFNob3dRdWVzdGlvbihxdWVfaW5kZXgpOwogICAgfWVsc2V7CiAgICAgICAgIHZhciBsaW5rZWRpbmltZz1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGlua2VkaW5pbWcnKTsKICAgICAgICAgcGVyY2VudGFnZS5pbm5lclRleHQgPSAoKHJpZ2h0X2Fuc3dlcnMqMTAwKS9hc2tpbmcubGVuZ3RoKS50b0ZpeGVkKDIpOwoKICAgICAgICBpZiAocGVyY2VudGFnZS5pbm5lclRleHQ+NDUpCiAgICAgICAgewogICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCJhc2tpbmcgQ29tcGxldGUiKTsKICAgICAgICBxdWl6X2JveC5jbGFzc0xpc3QuYWRkKCJpbmFjdGl2ZSIpOwogICAgICAgIHJlc3VsdF9ib3guY2xhc3NMaXN0LnJlbW92ZSgiaW5hY3RpdmUiKTsKICAgICAgICByaWdodF9hbnNfci5pbm5lclRleHQgPSByaWdodF9hbnN3ZXJzOwogICAgICAgIHdyb25nX2Fuc19yLmlubmVyVGV4dCA9IHdyb25nX2Fuc3dlcnM7CiAgICAgICAgY29uc3QgdGhlaWRvZmNlcnQ9Z2V0aWQoKTsKICAgICAgICB2YXIgaWxpbms9J2h0dHBzOi8vdmFsaWRhdGUubmFyZW5kcmFkd2l2ZWRpLm9yZy8/Y2VydGlmaWNhdGU9Jyt0aGVpZG9mY2VydCsnJmM9JytjbmFtZTsKCiAgICAgICAgdmFyIGlsaW5rMT0naHR0cHM6Ly92YWxpZGF0ZS5uYXJlbmRyYWR3aXZlZGkub3JnLz9jZXJ0aWZpY2F0ZSUzRCcrdGhlaWRvZmNlcnQrJyUyNmMlM0QnK2NuYW1lOwogICAgICAgIC8vZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NlcnRpZCcpLmlubmVySFRNTD0nWW91ciBVUkwgT2YgUXVpeiBDb21wbGV0aW9uIElzIDxhIGhyZWY9Imh0dHBzOi8vdmFsaWRhdGUubmFyZW5kcmFkd2l2ZWRpLm9yZy8/Y2VydGlmaWNhdGU9Jyt0aGVpZG9mY2VydCsnKyc+JysnSG9sYTwvYT4nOwogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjZXJ0aWQnKS5zdHlsZS5kaXNwbGF5PSJibG9jayI7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RoZWxpbmsnKS5ocmVmPWlsaW5rOwogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aGVsaW5rJykuaW5uZXJUZXh0PWlsaW5rOwogICAgICAgIAogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaGFyZXRleHQnKS5pbm5lclRleHQ9J1VzZSBCZWxvdyBCdXR0b24gVG8gQWRkIFlvdXIgQ2VydGlmaWNhdGUgVG8gTGlua2VkSW4nOwoKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3JlZGl0JykuaW5uZXJIVE1MPSdNYWtlIFN1cmUgVG8gRm9sbG93IDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9uYXJlbmRyYWR3aXZlZGkiPk5hcmVuZHJhIER3aXZlZGk8L2E+IEFuZCA8YSBocmVmPSJodHRwczovL3d3dy5saW5rZWRpbi5jb20vY29tcGFueS9uYXJlbmRyYWR3aXZlZGkiPk5hcmVuZHJhRHdpdmVkaS5Pcmc8L2E+IE9uIExpbmtlZEluJzsKCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpbmtlZGlubGluaycpLmhyZWY9bGlua2VkaW4xK2lsaW5rMStsaW5rZWRpbjIrdGhlaWRvZmNlcnQrZW5jb2RlVVJJQ29tcG9uZW50KCcmYz0nKStjbmFtZTsKICAgICAgICAgCiAgICAgICAgICBsaW5rZWRpbmltZy5zcmM9J2h0dHBzOi8vaS5pYmIuY28vajgwdzd0WC9saW5rZWRpbi5wbmcnOwoKICAgICAgICAgIC8vIHNhdmVpdAoKICAgICAgICAgIGNvbnN0IGlkID0gdGhlaWRvZmNlcnQ7CiAgICBjb25zdCBteW5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXNlcm5hbWUiKS52YWx1ZTsKCgogICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTsKCnZhciBkYXRlID0gdG9kYXkuZ2V0RnVsbFllYXIoKSsnLScrKHRvZGF5LmdldE1vbnRoKCkrMSkrJy0nK3RvZGF5LmdldERhdGUoKTsKCnZhciB0aW1lID0gdG9kYXkuZ2V0SG91cnMoKSArICI6IiArIHRvZGF5LmdldE1pbnV0ZXMoKSArICI6IiArIHRvZGF5LmdldFNlY29uZHMoKTsKCnZhciBkYXRlVGltZSA9IGRhdGUrJyAnK3RpbWU7CgogCnZhciB0aGVsZXZlbD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGV2ZWwnKTsKCnZhciBsZXZlbGl0PScnOwppZiAodGhlbGV2ZWwuaW5uZXJUZXh0PSdiJykKewogICAgbGV2ZWxpdD0nQmVnaW5uZXInOwp9CmVsc2UgaWYgKHRoZWxldmVsLmlubmVyVGV4dD0naScpCnsKICAgIGxldmVsaXQ9J0ludGVybWVkaWF0ZSc7Cn0KCmVsc2UgaWYgKHRoZWxldmVsLmlubmVyVGV4dD0nYScpCnsKICAgIGxldmVsaXQ9J0FkdmFuY2UnOwp9CgplbHNlCnsKICAgIGxldmVsaXQ9J05vcm1hbCc7Cn0KCiAgICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoY25hbWUrJy8nICsgaWQpLnNldCh7CiAgICAgICAgICAgIElEOiBpZCwKICAgICAgICAgICAgTmFtZTogbXluYW1lLAogICAgICAgICAgICBEaWZmaWN1bHR5OmxldmVsaXQsCiAgICAgICAgICAgIFF1aXo6dGhldGl0bGUsCiAgICAgICAgICAgIERhdGU6IGRhdGUsCiAgICAgICAgICAgIFRpbWU6dGltZQogICAgICAgIH0pOwogICAgICAgIC8vYWxlcnQoIlN1Y2Nlc3NmdWxseSBTdWJtaXR0ZWQiKTsKICAgICAgICAgCiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIGFsZXJ0KCdZb3VyIE1hcmtzIElzIE5vdCA0NSUrICwgUGxlYXNlIEF0dGVtcHQgQWZ0ZXIgTGVhcm5pbmcnKTsKICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uPSdodHRwczovL3F1aXp0ZXN0Lm5hcmVuZHJhZHdpdmVkaS5vcmcnOwogICAgICAgICAgICAKICAgICAgICB9CgogICAgICAgIAogICAgfQoKICAgIGlmKGFza2luZy5sZW5ndGgtMT09cXVlX2luZGV4KXsKICAgICAgICBuZXh0X2J0bi5pbm5lclRleHQgPSAiRmluaXNoIjsKICAgIH0KfQoKZnVuY3Rpb24gVXNlckFuc3dlcihhbnN3ZXIpewogICAgbGV0IHVzZXJBbnMgPSBhbnN3ZXIuaW5uZXJUZXh0OwogICAgbGV0IHRoZXdyID0gYXNraW5nW3F1ZV9pbmRleF0ud3I7CiAgICB2YXIgQWxsT3B0aW9uczIgPSBvcHRpb25zX2JveC5xdWVyeVNlbGVjdG9yQWxsKCIub3B0aW9uIik7CgogICAgbmV4dF9idG4uY2xhc3NMaXN0LnJlbW92ZSgiaW5hY3RpdmUiKTsKICAgIGlmKHVzZXJBbnMgPT0gdGhld3IpewogICAgICAKICAgICAgICBhbnN3ZXIuY2xhc3NMaXN0LmFkZCgiY29ycmVjdCIpOwogICAgICAgIGFuc3dlci5pbnNlcnRBZGphY2VudEhUTUwoImJlZm9yZWVuZCIsbWFya19jaGVjayk7CiAgICAgICAgcmlnaHRfYW5zd2VycysrOwogICAgfQogICAgCgplbHNlCnsKICAgIGFuc3dlci5jbGFzc0xpc3QuYWRkKCJjb3JyZWN0Iik7CiAgICBhbnN3ZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCJiZWZvcmVlbmQiLG1hcmtfY2hlY2spOwogICAgd3JvbmdfYW5zd2VycysrOwoKfQogICAgZm9yKHZhciBqPTA7IGo8QWxsT3B0aW9uczIubGVuZ3RoOyBqKyspewogICAgICAgIEFsbE9wdGlvbnMyW2pdLmNsYXNzTGlzdC5hZGQoImRpc2FibGVkIik7CiAgICB9Cgp9CgpmdW5jdGlvbiByZXNldCgpewogICAgcXVlX2luZGV4ID0gMDsKICAgIHJpZ2h0X2Fuc3dlcnMgPSAwOwogICAgd3JvbmdfYW5zd2VycyA9IDA7CiAgICBuZXh0X2J0bi5pbm5lclRleHQgPSAiTmV4dCBRdWVzdGlvbiI7CiAgIGNvdW50X3F1ZS5pbm5lclRleHQgPSBxdWVfaW5kZXgrMTsKICAgU2hvd1F1ZXN0aW9uKHF1ZV9pbmRleCk7Cn0K')
